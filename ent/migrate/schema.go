// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Unique: true},
		{Name: "desc", Type: field.TypeString, Nullable: true},
		{Name: "uuid", Type: field.TypeUUID},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// ItemsColumns holds the columns for the "items" table.
	ItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Unique: true},
		{Name: "desc", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "count", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ItemsTable holds the schema information for the "items" table.
	ItemsTable = &schema.Table{
		Name:       "items",
		Columns:    ItemsColumns,
		PrimaryKey: []*schema.Column{ItemsColumns[0]},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Unique: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// GroupGroupItemsColumns holds the columns for the "group_group_items" table.
	GroupGroupItemsColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "item_id", Type: field.TypeInt},
	}
	// GroupGroupItemsTable holds the schema information for the "group_group_items" table.
	GroupGroupItemsTable = &schema.Table{
		Name:       "group_group_items",
		Columns:    GroupGroupItemsColumns,
		PrimaryKey: []*schema.Column{GroupGroupItemsColumns[0], GroupGroupItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_group_items_group_id",
				Columns:    []*schema.Column{GroupGroupItemsColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_group_items_item_id",
				Columns:    []*schema.Column{GroupGroupItemsColumns[1]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TagTagItemsColumns holds the columns for the "tag_tag_items" table.
	TagTagItemsColumns = []*schema.Column{
		{Name: "tag_id", Type: field.TypeInt},
		{Name: "item_id", Type: field.TypeInt},
	}
	// TagTagItemsTable holds the schema information for the "tag_tag_items" table.
	TagTagItemsTable = &schema.Table{
		Name:       "tag_tag_items",
		Columns:    TagTagItemsColumns,
		PrimaryKey: []*schema.Column{TagTagItemsColumns[0], TagTagItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tag_tag_items_tag_id",
				Columns:    []*schema.Column{TagTagItemsColumns[0]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tag_tag_items_item_id",
				Columns:    []*schema.Column{TagTagItemsColumns[1]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GroupsTable,
		ItemsTable,
		TagsTable,
		GroupGroupItemsTable,
		TagTagItemsTable,
	}
)

func init() {
	GroupGroupItemsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupGroupItemsTable.ForeignKeys[1].RefTable = ItemsTable
	TagTagItemsTable.ForeignKeys[0].RefTable = TagsTable
	TagTagItemsTable.ForeignKeys[1].RefTable = ItemsTable
}
